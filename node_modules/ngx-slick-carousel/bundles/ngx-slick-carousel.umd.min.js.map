{"version":3,"sources":["ng://ngx-slick-carousel/slick.component.ts","ng://ngx-slick-carousel/index.ts"],"names":["SlickCarouselComponent","el","zone","this","EventEmitter","prototype","ngOnDestroy","unslick","ngAfterViewChecked","_this","_addedSlides","length","_removedSlides","nextSlidesLength","slides","initialized","forEach","slickItem","push","runOutsideAngular","$instance","slick","nativeElement","idx","indexOf","filter","s","initSlick","jQuery","on","event","run","init","emit","config","currentIndex","initialSlide","currentSlide","afterChange","nextSlide","beforeChange","breakpoint","destroy","addSlide","removeSlide","slickGoTo","index","slickNext","slickPrev","slickPause","slickPlay","Component","args","selector","exportAs","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","template","ElementRef","NgZone","Input","Output","SlickItemDirective","platformId","carousel","ngOnInit","isPlatformBrowser","Directive","Inject","PLATFORM_ID","decorators","type","Host","SlickCarouselModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {isPlatformBrowser} from '@angular/common';\nimport {\n    AfterViewChecked,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Host,\n    Inject,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    PLATFORM_ID\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\n\ndeclare const jQuery: any;\n\n/**\n * Slick component\n */\n@Component({\n    selector: 'ngx-slick-carousel',\n    exportAs: 'slick-carousel',\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => SlickCarouselComponent),\n        multi: true\n    }],\n    template: '<ng-content></ng-content>',\n})\nexport class SlickCarouselComponent implements OnDestroy, AfterViewChecked {\n\n    @Input() config: any;\n    @Output() afterChange: EventEmitter<any> = new EventEmitter();\n    @Output() beforeChange: EventEmitter<any> = new EventEmitter();\n    @Output() breakpoint: EventEmitter<any> = new EventEmitter();\n    @Output() destroy: EventEmitter<any> = new EventEmitter();\n    @Output() init: EventEmitter<any> = new EventEmitter();\n\n\n    public slides: any[] = [];\n    private _removedSlides: SlickItemDirective[] = [];\n    private _addedSlides: SlickItemDirective[] = [];\n    public $instance: any;\n    public currentIndex: number;\n    private initialized: Boolean = false;\n\n    /**\n     * Constructor\n     */\n    constructor(private el: ElementRef,\n                private zone: NgZone) {\n\n    }\n\n    /**\n     * On component destroy\n     */\n    ngOnDestroy() {\n        this.unslick();\n    }\n\n    /**\n     * On component view checked\n     */\n    ngAfterViewChecked() {\n        if (this._addedSlides.length > 0 || this._removedSlides.length > 0) {\n            const nextSlidesLength = this.slides.length - this._removedSlides.length + this._addedSlides.length;\n            if (!this.initialized) {\n                if (nextSlidesLength > 0) {\n                    this.initSlick();\n                }\n                // if nextSlidesLength is zere, do nothing\n            } else if (nextSlidesLength === 0) { // unslick case\n                this.unslick();\n            } else {\n                this._addedSlides.forEach(slickItem => {\n                    this.slides.push(slickItem);\n                    this.zone.runOutsideAngular(() => {\n                        this.$instance.slick('slickAdd', slickItem.el.nativeElement);\n                    });\n                });\n                this._addedSlides = [];\n\n                this._removedSlides.forEach(slickItem => {\n                    const idx = this.slides.indexOf(slickItem);\n                    this.slides = this.slides.filter(s => s !== slickItem);\n                    this.zone.runOutsideAngular(() => {\n                        this.$instance.slick('slickRemove', idx);\n                    });\n                });\n                this._removedSlides = [];\n            }\n        }\n    }\n\n    /**\n     * init slick\n     */\n    initSlick() {\n        this.slides = this._addedSlides;\n        this._addedSlides = [];\n        this._removedSlides = [];\n        this.zone.runOutsideAngular(() => {\n            this.$instance = jQuery(this.el.nativeElement);\n\n            this.$instance.on('init', (event, slick) => {\n                this.zone.run(() => {\n                    this.init.emit({event, slick});\n                });\n            });\n\n            this.$instance.slick(this.config);\n\n            this.zone.run(() => {\n                this.initialized = true;\n\n                this.currentIndex = (this.config && this.config.initialSlide) ? this.config.initialSlide : 0;\n            });\n\n            this.$instance.on('afterChange', (event, slick, currentSlide) => {\n                this.zone.run(() => {\n                    this.afterChange.emit({event, slick, currentSlide});\n                    this.currentIndex = currentSlide;\n                });\n            });\n\n            this.$instance.on('beforeChange', (event, slick, currentSlide, nextSlide) => {\n                this.zone.run(() => {\n                    this.beforeChange.emit({event, slick, currentSlide, nextSlide});\n                });\n            });\n\n            this.$instance.on('breakpoint', (event, slick, breakpoint) => {\n                this.zone.run(() => {\n                    this.breakpoint.emit({event, slick, breakpoint});\n                });\n            });\n\n            this.$instance.on('destroy', (event, slick) => {\n                this.zone.run(() => {\n                    this.destroy.emit({event, slick});\n                });\n            });\n        });\n    }\n\n    addSlide(slickItem: SlickItemDirective) {\n        this._addedSlides.push(slickItem);\n    }\n\n    removeSlide(slickItem: SlickItemDirective) {\n        this._removedSlides.push(slickItem);\n    }\n\n    /**\n     * Slick Method\n     */\n    public slickGoTo(index: number) {\n        this.zone.runOutsideAngular(() => {\n            this.$instance.slick('slickGoTo', index);\n        });\n    }\n\n    public slickNext() {\n        this.zone.runOutsideAngular(() => {\n            this.$instance.slick('slickNext');\n        });\n    }\n\n    public slickPrev() {\n        this.zone.runOutsideAngular(() => {\n            this.$instance.slick('slickPrev');\n        });\n    }\n\n    public slickPause() {\n        this.zone.runOutsideAngular(() => {\n            this.$instance.slick('slickPause');\n        });\n    }\n\n    public slickPlay() {\n        this.zone.runOutsideAngular(() => {\n            this.$instance.slick('slickPlay');\n        });\n    }\n\n    public unslick() {\n        if (this.$instance) {\n            this.zone.runOutsideAngular(() => {\n                this.$instance.slick('unslick');\n            });\n        }\n        this.initialized = false;\n        this.slides = [];\n        this._addedSlides = [];\n        this._removedSlides = [];\n    }\n}\n\n@Directive({\n    selector: '[ngxSlickItem]',\n})\nexport class SlickItemDirective implements OnInit, OnDestroy {\n    constructor(public el: ElementRef,\n                @Inject(PLATFORM_ID) private platformId: string,\n                @Host() private carousel: SlickCarouselComponent) {\n    }\n\n    ngOnInit() {\n        if (isPlatformBrowser(this.platformId)) {\n            this.carousel.addSlide(this);\n        }\n    }\n\n    ngOnDestroy() {\n        if (isPlatformBrowser(this.platformId)) {\n            this.carousel.removeSlide(this);\n        }\n    }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {SlickCarouselComponent, SlickItemDirective} from './slick.component';\n\nexport * from './slick.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    SlickCarouselComponent,\n    SlickItemDirective,\n  ],\n  exports: [\n    SlickCarouselComponent,\n    SlickItemDirective,\n  ]\n})\nexport class SlickCarouselModule {\n}\n"]}